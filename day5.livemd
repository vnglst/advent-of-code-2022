<!-- livebook:{"persist_outputs":true} -->

# Day 5

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Part 1

```elixir
input = Kino.Input.textarea("Please add your input from Advent of Code")
```

```elixir
raw_input = "
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
"

raw_input = input |> Kino.Input.read()

input = raw_input |> String.split("\n") |> Enum.reject(fn el -> el == "" end)

{moves, stacks} =
  input
  |> Enum.split_with(fn el -> String.starts_with?(el, "move") end)

{_ids, stacks} = List.pop_at(stacks, -1)

defmodule Moves do
  def parse(str) do
    str
    |> String.split(" ")
    |> Enum.reject(&reject_fn/1)
    |> Enum.map(&String.to_integer/1)
  end

  defp reject_fn(str) do
    case str do
      "from" -> true
      "to" -> true
      "move" -> true
      _ -> false
    end
  end
end

moves = moves |> Enum.map(&Moves.parse/1)

defmodule Stacks do
  def parse(line) do
    line
    |> String.to_charlist()
    |> Enum.chunk_every(4)
    |> Enum.map(&Enum.at(&1, 1))
  end
end

columns =
  stacks
  |> Enum.map(&Stacks.parse/1)
  # equivalent of transposing a matrix
  |> Enum.zip_with(& &1)
  # removes all empty space above crates
  |> Enum.map(fn stack -> Enum.reject(stack, fn char -> char == ?\s end) end)

{columns, moves}
```

<!-- livebook:{"output":true} -->

```
{['GJWRFTZ', 'MWG', 'GHNJ', 'WNCRJ', 'MVQGBSFW', 'CWVDTRS', 'VGZDCNBH', 'CGMNJS', 'LDJCWNPG'],
 [
   [1, 5, 2],
   [7, 7, 1],
   [1, 1, 7],
   [1, 4, 1],
   [7, 9, 1],
   [1, 3, 7],
   [4, 5, 4],
   [6, 4, 9],
   [2, 7, 6],
   [6, 8, 2],
   [2, 4, 5],
   [2, 3, 7],
   [11, 1, 4],
   [6, 6, 1],
   [3, 5, 3],
   [5, 9, 8],
   [1, 2, 3],
   [2, 7, 9],
   [7, 1, 2],
   [1, 5, 3],
   [1, 5, 3],
   [5, 8, 5],
   [3, 5, 4],
   [1, 1, 7],
   [1, 3, 8],
   [2, 6, 3],
   [3, 3, 4],
   [1, 6, 2],
   [5, 4, 2],
   [2, 5, 3],
   [2, 7, 1],
   [1, 8, 1],
   [7, 1, 7],
   [4, 4, 2],
   [7, 4, 1],
   [10, 1, 5],
   [10, 5, 2],
   [11, 2, 3],
   [1, 1, 6],
   [1, 4, 7],
   [4, 7, 1],
   [6, 2, 5],
   [2, 1, 3],
   [1, 9, 5],
   [2, 9, 6],
   [1, 6, ...],
   [3, ...],
   [...],
   ...
 ]}
```

## Part 1

```elixir
result_1 =
  Enum.reduce(moves, columns, fn move, columns ->
    [number, from, to] = move
    from_col = Enum.at(columns, from - 1)
    to_col = Enum.at(columns, to - 1)
    # getting all crates to be moved
    {crates, from_col} = Enum.split(from_col, number)
    # first crate is moved first, should last element so reversing list of crates to move
    # adding them on top of the rest
    to_col = Enum.reverse(crates) ++ to_col
    # update columns with the new from_col and to_col
    columns |> List.replace_at(from - 1, from_col) |> List.replace_at(to - 1, to_col)
  end)

result_1 = Enum.map(result_1, fn col -> Enum.at(col, 0) end)
```

<!-- livebook:{"output":true} -->

```
'CWMTGHBDW'
```

## Part 2

```elixir
result_2 =
  Enum.reduce(moves, columns, fn move, columns ->
    [number, from, to] = move
    from_col = Enum.at(columns, from - 1)
    to_col = Enum.at(columns, to - 1)
    # getting all crates to be moved
    {crates, from_col} = Enum.split(from_col, number)
    # adding them on top of the rest, not reversing here
    to_col = crates ++ to_col
    # update columns with the new from_col and to_col
    columns |> List.replace_at(from - 1, from_col) |> List.replace_at(to - 1, to_col)
  end)

result_2 = Enum.map(result_2, fn col -> Enum.at(col, 0) end)
```

<!-- livebook:{"output":true} -->

```
'SSCGWJCRB'
```
